<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-11T19:58:09-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">aMusicalCoder</title><subtitle>Portfolio Site for Benjamin Wagner, Full-Stack Developer and Jazz Guitarist.</subtitle><entry><title type="html">Blog Coming Soon!</title><link href="http://localhost:4000/blog/2023/05/09/blogComingSoon.html" rel="alternate" type="text/html" title="Blog Coming Soon!" /><published>2023-05-09T00:00:00-04:00</published><updated>2023-05-09T00:00:00-04:00</updated><id>http://localhost:4000/blog/2023/05/09/blogComingSoon</id><content type="html" xml:base="http://localhost:4000/blog/2023/05/09/blogComingSoon.html">&lt;p&gt;With this blog, I intend to chronicle the progress I make with my personal projects. This will be mainly be for documentation purposes but will also serve to further establish my credibility as I gain more experience.&lt;/p&gt;

&lt;p&gt;Some such projects are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finishing my Modal Improvisation Practice Tool website.&lt;/li&gt;
  &lt;li&gt;Tonearm Rewiring of an Onkyo CP-1040F Turntable.&lt;/li&gt;
  &lt;li&gt;Learning x86 Assembly Language and reading &lt;em&gt;The Zen of Assembly Language&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="blog" /><summary type="html">With this blog, I intend to chronicle the progress I make with my personal projects. This will be mainly be for documentation purposes but will also serve to further establish my credibility as I gain more experience.</summary></entry><entry><title type="html">Python Scripting and USACO Training</title><link href="http://localhost:4000/portfolio/2023/04/27/USACOandScripts.html" rel="alternate" type="text/html" title="Python Scripting and USACO Training" /><published>2023-04-27T00:00:00-04:00</published><updated>2023-04-27T00:00:00-04:00</updated><id>http://localhost:4000/portfolio/2023/04/27/USACOandScripts</id><content type="html" xml:base="http://localhost:4000/portfolio/2023/04/27/USACOandScripts.html">&lt;p&gt;Over the course of my career in Tech, I have created various python scripts to serve specific purposes.
For example, while working help-desk at Pine-Richland School District, I created a script to automate csv formatting for a mass e-mail, and one to automate csv formatting for a mass letter containing standardized testing information.
Additionally, I am undertaking the USA Computing Olympiad (USACO) on-line training in the efforts of improving my abilities as a programmer and to learn some of the nuance and wisdom that lies within competitive programming. To aid such an effort, I follow up some USACO problems with analysis and reflection.
All code is available &lt;a href=&quot;&quot;&gt;here&lt;/a&gt; on my Github.&lt;/p&gt;</content><author><name></name></author><category term="portfolio" /><summary type="html">Over the course of my career in Tech, I have created various python scripts to serve specific purposes. For example, while working help-desk at Pine-Richland School District, I created a script to automate csv formatting for a mass e-mail, and one to automate csv formatting for a mass letter containing standardized testing information. Additionally, I am undertaking the USA Computing Olympiad (USACO) on-line training in the efforts of improving my abilities as a programmer and to learn some of the nuance and wisdom that lies within competitive programming. To aid such an effort, I follow up some USACO problems with analysis and reflection. All code is available here on my Github.</summary></entry><entry><title type="html">aMusicalCoder (This Website)</title><link href="http://localhost:4000/portfolio/2023/04/27/aMusicalCoder.html" rel="alternate" type="text/html" title="aMusicalCoder (This Website)" /><published>2023-04-27T00:00:00-04:00</published><updated>2023-04-27T00:00:00-04:00</updated><id>http://localhost:4000/portfolio/2023/04/27/aMusicalCoder</id><content type="html" xml:base="http://localhost:4000/portfolio/2023/04/27/aMusicalCoder.html">&lt;p&gt;This website serves the purpose of my personal portfolio and blog. The particle effects are created using JSON and the particles.js library. The animations use the animate.css library. The rest of the front-end is HTML/CSS/JS, with markdown content served via Jekyll(Ruby) and hosted on Github Pages. Despite using Jekyll to serve content, I did not use any templates or layouts as per a typical Jekyll website. This is because I wanted the entire website to be on a single page so as not to interrupt the particle effect or any of the animations. All code is available &lt;a href=&quot;&quot;&gt;here&lt;/a&gt; on my Github.&lt;/p&gt;</content><author><name></name></author><category term="portfolio" /><summary type="html">This website serves the purpose of my personal portfolio and blog. The particle effects are created using JSON and the particles.js library. The animations use the animate.css library. The rest of the front-end is HTML/CSS/JS, with markdown content served via Jekyll(Ruby) and hosted on Github Pages. Despite using Jekyll to serve content, I did not use any templates or layouts as per a typical Jekyll website. This is because I wanted the entire website to be on a single page so as not to interrupt the particle effect or any of the animations. All code is available here on my Github.</summary></entry><entry><title type="html">Games I Made in High School</title><link href="http://localhost:4000/portfolio/2023/04/27/gameDevelopment.html" rel="alternate" type="text/html" title="Games I Made in High School" /><published>2023-04-27T00:00:00-04:00</published><updated>2023-04-27T00:00:00-04:00</updated><id>http://localhost:4000/portfolio/2023/04/27/gameDevelopment</id><content type="html" xml:base="http://localhost:4000/portfolio/2023/04/27/gameDevelopment.html">&lt;p&gt;Most of my self-taught knowledge of programming came from developing games throughout my childhood. When I was 8, I started out by making text-based adventure games in C++. I followed along with all the game development books I could find (my dad had a lot lying around) and found a deep passion for programming in the process. The only remnants I have found in all these years of playing with code are as follows:&lt;/p&gt;

&lt;h2 id=&quot;amorphous-arena&quot;&gt;Amorphous Arena:&lt;/h2&gt;

&lt;p&gt;RTS game I created from scratch in under 48 hours for the Ludum Dare 35 game developer competition. 
Created only using C++ and the graphics library SDL.&lt;/p&gt;

&lt;h2 id=&quot;business-simulator&quot;&gt;Business Simulator:&lt;/h2&gt;

&lt;p&gt;Small and unfinished web game I started to work on in HTML, CSS, and JS.
Not much to show off here, but I left it in for archive purposes.&lt;/p&gt;

&lt;h2 id=&quot;chapmans-adventure&quot;&gt;Chapman’s Adventure:&lt;/h2&gt;

&lt;p&gt;Unfinished top-down adventure game. Created using C++ and the graphics library SFML.
Basic graphics engine implemented but nothing further.&lt;/p&gt;

&lt;h2 id=&quot;swipe-it-2014-2015&quot;&gt;Swipe It! (2014-2015)&lt;/h2&gt;

&lt;p&gt;First iteration of a mobile-game I had worked on over multiple years. Created with Action-Script 3.0 and the Starling Framework.
You swipe across an arrow that appears on the screen in a random direction.
Your goal is to get as many swipes as you can before the delay between your swipes becomes too long.&lt;/p&gt;

&lt;h2 id=&quot;swipe-it-2016&quot;&gt;Swipe It! (2016)&lt;/h2&gt;

&lt;p&gt;Final iteration of Swipe It!.
The graphics have been greatly improved, with animations too.
The main game mechanics has been improved, with power-ups and a surrounding story. You are trying to keep a generator running.
The geometric arrow has been replaced with a wire.&lt;/p&gt;

&lt;h2 id=&quot;worm-fishing2014&quot;&gt;Worm Fishing(2014):&lt;/h2&gt;

&lt;p&gt;Unfinished game where worms float to the sky and you have to flip a bucket with “realistic” physics to catch them.
Bucket physics fully functional at the point of abandonment.&lt;/p&gt;

&lt;p&gt;All code can be found &lt;a href=&quot;https://github.com/aMusicalCoder&quot;&gt;here&lt;/a&gt; on my Github.&lt;/p&gt;</content><author><name></name></author><category term="portfolio" /><summary type="html">Most of my self-taught knowledge of programming came from developing games throughout my childhood. When I was 8, I started out by making text-based adventure games in C++. I followed along with all the game development books I could find (my dad had a lot lying around) and found a deep passion for programming in the process. The only remnants I have found in all these years of playing with code are as follows:</summary></entry><entry><title type="html">Giant Eagle Store Locator</title><link href="http://localhost:4000/portfolio/2023/04/27/quickGeLocator.html" rel="alternate" type="text/html" title="Giant Eagle Store Locator" /><published>2023-04-27T00:00:00-04:00</published><updated>2023-04-27T00:00:00-04:00</updated><id>http://localhost:4000/portfolio/2023/04/27/quickGeLocator</id><content type="html" xml:base="http://localhost:4000/portfolio/2023/04/27/quickGeLocator.html">&lt;p&gt;This simple web application takes a Giant Eagle/GetGo store number as input and outputs the street address. 
I built it out of frustration with the official Giant Eagle store locator website which was slow and did not have an interface for inputting store numbers. You could only check specific store numbers by editing the URL manually.
This application provides a quick reference for field service engineers on the road. 
The data was procured from an official excel spreadsheet, which I scraped and formatted to my liking using Python and pandas. I then created a sqlite database with this formatted csv data, which is accessed on the website through Sql.Js. Finally, I made sure the site was responsive and performed correctly on a wide array of devices. The front-end is pure HTML/CSS and the static website is hosted on Github Pages. All code is available &lt;a href=&quot;&quot;&gt;here&lt;/a&gt; on my Github. Check out the site &lt;a href=&quot;&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="portfolio" /><summary type="html">This simple web application takes a Giant Eagle/GetGo store number as input and outputs the street address. I built it out of frustration with the official Giant Eagle store locator website which was slow and did not have an interface for inputting store numbers. You could only check specific store numbers by editing the URL manually. This application provides a quick reference for field service engineers on the road. The data was procured from an official excel spreadsheet, which I scraped and formatted to my liking using Python and pandas. I then created a sqlite database with this formatted csv data, which is accessed on the website through Sql.Js. Finally, I made sure the site was responsive and performed correctly on a wide array of devices. The front-end is pure HTML/CSS and the static website is hosted on Github Pages. All code is available here on my Github. Check out the site here.</summary></entry></feed>